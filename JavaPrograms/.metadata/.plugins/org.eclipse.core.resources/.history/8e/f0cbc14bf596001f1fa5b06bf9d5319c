package gui;

import java.io.File;
import java.util.Timer;

import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.SourceDataLine;

import model.Player;
import model.Question;

import org.eclipse.jface.window.ApplicationWindow;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.StyledText;
import org.eclipse.swt.events.KeyEvent;
import org.eclipse.swt.events.KeyListener;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.graphics.Font;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Text;

public class QuestionWindow extends ApplicationWindow {
	Question question;
	Player currentPlayer;
	String selection;
	Composite comp;
	Button ConfirmButton;
	int time = 20;
	Timer timer;
	AudioFormat audioFormat;
	AudioInputStream audioInputStream;
	SourceDataLine sourceDataLine;
	Text timerText;

	public QuestionWindow(Question q, Player p) {

		super(null);

		this.question = q;
		this.currentPlayer = p;
		selection = "";
	}

	public void playSound() {

		File soundFile = new File("bell.wav");
		AudioInputStream sound;
		Clip clip = null;
		try {
			sound = AudioSystem.getAudioInputStream(soundFile);
			DataLine.Info info = new DataLine.Info(Clip.class,
					sound.getFormat());
			clip = (Clip) AudioSystem.getLine(info);
			clip.open(sound);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		// load the sound into memory (a Clip)

		// due to bug in Java Sound, explicitly exit the VM when
		// the sound has stopped.
		// clip.addLineListener(new LineListener() {
		// public void update(LineEvent event) {
		// if (event.getType() == LineEvent.Type.STOP) {
		// event.getLine().close();
		// }
		// }
		// });
		// play the sound clip
		clip.start();

	}

	public void startTimer() {

	}

	protected Control createContents(Composite parent) {
		setBlockOnOpen(true);
		getShell().setText("" + question.getPoints());
		Font font1 = new Font(getShell().getDisplay(), "Tahoma", 16, SWT.BOLD
				| SWT.UNDERLINE_SINGLE);

		comp = new Composite(parent, SWT.NONE);
		GridLayout complayout = new GridLayout();

		complayout.numColumns = 4;
		comp.setLayout(complayout);
		Label currentPlayerName = new Label(comp, SWT.BORDER_SOLID);
		currentPlayerName
				.setText("Current Player:  " + currentPlayer.getName());
		final Text timerText = new Text(comp, SWT.READ_ONLY | SWT.BORDER);
		timerText.setFont(font1);

		Text quest = new Text(comp, SWT.READ_ONLY | SWT.MULTI | SWT.BORDER
				| SWT.WRAP);
		quest.setFont(font1);

		// Text quest=new Text(comp, SWT.READ_ONLY|SWT.MULTI|SWT.BORDER);
		quest.setText(question.getQuestion());
		GridData gridData = new GridData(GridData.FILL_BOTH);
		gridData.grabExcessHorizontalSpace = true;
		gridData.horizontalSpan = 4;

		quest.setLayoutData(gridData);

		for (int i = 0; i < 4; i++) {
			final Button choice = new Button(comp, SWT.RADIO);
			choice.setFont(font1);
			choice.setText(question.getChioces().get(i));
			choice.addSelectionListener(new SelectionListener() {

				@Override
				public void widgetSelected(SelectionEvent e) {
					// TODO Auto-generated method stub
					selection = choice.getText();
					ConfirmButton.setEnabled(true);
					// playSound();
				}

				@Override
				public void widgetDefaultSelected(SelectionEvent e) {
					// TODO Auto-generated method stub

				}
			});
			gridData = new GridData(GridData.FILL_BOTH);
			gridData.grabExcessHorizontalSpace = true;
			gridData.grabExcessVerticalSpace = true;
			gridData.horizontalSpan = 4;
			choice.setLayoutData(gridData);
			choice.addKeyListener(new KeyListener() {

				@Override
				public void keyReleased(KeyEvent e) {
					// TODO Auto-generated method stub
					if (e.character == SWT.ESC) {
						close();
					}
				}

				@Override
				public void keyPressed(KeyEvent e) {
					// TODO Auto-generated method stub

				}
			});
		}
		ConfirmButton = new Button(comp, SWT.PUSH);
		ConfirmButton.setEnabled(false);
		ConfirmButton.setText("&confirm Answer");
		final StyledText answ = new StyledText(comp, SWT.READ_ONLY | SWT.MULTI
				| SWT.BORDER | SWT.WRAP);
		answ.setFont(font1);
		final Color correctColor = getShell().getDisplay().getSystemColor(
				SWT.COLOR_GREEN);
		final Color wrongColor = getShell().getDisplay().getSystemColor(
				SWT.COLOR_RED);

		answ.setBackground(new Color(getShell().getDisplay(), 255, 255, 255));

		gridData = new GridData(GridData.FILL_BOTH);
		gridData.grabExcessHorizontalSpace = true;
		gridData.grabExcessVerticalSpace = true;
		gridData.horizontalSpan = 4;
		gridData.verticalSpan = 4;
		answ.setLayoutData(gridData);
		answ.setVisible(false);

		ConfirmButton.addSelectionListener(new SelectionListener() {

			@Override
			public void widgetSelected(SelectionEvent e) {
				// TODO Auto-generated method stub
				String output = "";
				if (question.getAnswer().equals(selection.trim())) {
					currentPlayer.addPoints(question.getPoints());
					output = "CORRECT";
					answ.setForeground(correctColor);
				}
				if (!question.getAnswer().equals(selection)) {
					currentPlayer.deductPoints(question.getPoints());
					output = "SORRY";
					answ.setForeground(wrongColor);
				}
				output += System.getProperty("line.separator") + "Answer is: "
						+ question.getAnswer();
				answ.setText(output);
				answ.setVisible(true);
				comp.setFocus();
				ConfirmButton.setEnabled(false);

			}

			@Override
			public void widgetDefaultSelected(SelectionEvent e) {
				// TODO Auto-generated method stub

			}
		});
		answ.addKeyListener(new KeyListener() {

			@Override
			public void keyReleased(KeyEvent e) {
				// TODO Auto-generated method stub
				if ((e.character == SWT.ESC) && answ.isVisible()) {
					close();
				}
			}

			@Override
			public void keyPressed(KeyEvent e) {
				// TODO Auto-generated method stub

			}
		});

		comp.addKeyListener(new KeyListener() {

			@Override
			public void keyReleased(KeyEvent e) {
				// TODO Auto-generated method stub
				if ((e.character == SWT.ESC) && answ.isVisible()) {
					close();
				}
			}

			@Override
			public void keyPressed(KeyEvent e) {
				// TODO Auto-generated method stub

			}
		});

		getShell().setSize(1000, 1000);
		Thread timeThread=new Thread(new Runnable() {
			public void run() {	
					
					time=time-1;
					timerText.setText(String.valueOf(time));
					
			}
		});
		timeThread.run();
		return parent;
	}

}
